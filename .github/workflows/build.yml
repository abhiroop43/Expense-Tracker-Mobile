# Note: In a yml each level is padded by 2 spaces
name: Flutter

on:
  # Runs this action when you push on master
  push:
    branches: [ "master" ]
  # Runs this when a PR against master is created
  pull_request:
    branches: [ "master" ]

jobs:
  flutter_job:

    # The machine, we can also use windows-latest or ubuntu-latest
    # We are choosing macos-latest because we will be also building for iOS
    runs-on: ubuntu-latest

    steps:

      # Clones the project on the machine
      - uses: actions/checkout@v4

      # Sets up java 11
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      # Installs flutter and related dependency on this machine
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          # flutter-version: '3.16.8'
          # ^ If you want to use a specific version of flutter
      
      # Fetches proj dependencies from pub
      - name: 📦 Install dependencies
        run: flutter pub get
        # ^ If you want to use a specific version of flutter

      # Create firebase_options.dart from secret
      - name: 🎨 Create firebase_options.dart
        env:
          FIREBASE_OPTIONS_CONTENT: ${{ secrets.FIREBASE_OPTIONS_DARTS }}
        run: |
          mkdir -p lib
          echo "$FIREBASE_OPTIONS_CONTENT" > lib/firebase_options.dart
          echo "firebase_options.dart created successfully."

      # Re-run pub get to refresh the project's analysis cache
      - name: 📦 Re-install dependencies
        run: flutter pub get
      
      # Verifies if the dart code is formatted well
      - name: ✅ Verify formatting
        run: dart format --output=none --set-exit-if-changed .
        # --set-exit-if-changed stops execution if the any code is not well formatted
        # --output=none prints files which needs to be formatted
      
      # Checks for Symantic errors. Can be configured using analysis_options.yaml
      - name: 🔍 Analyze project source
        run: flutter analyze --fatal-warnings
        # optionally use --fatal-warnings to stop execution if any warnings are found

      # Runs unit test
      # - name: Run tests
      #   run: flutter test

      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEY_JKS }}" | base64 --decode > android/app/keystore.jks

      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.ALIAS_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=keystore.jks" >> android/key.properties

      # Create android apk
      - name: Build APK
        run: flutter build apk --release

      - name: Build AppBundle
        run: flutter build appbundle

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Releases
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab

      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Modify Tag
        if: env.TAG_EXISTS == 'true'
        id: modify_tag
        run: |
          new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
          echo "VERSION=$new_version" >> $GITHUB_ENV

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/flutter-apk/app-release.apk,build/app/outputs/bundle/release/app-release.aab"
          tag: v${{ env.VERSION }}
          token: ${{ secrets.TOKEN }}
